<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Catfish</title><link>https://www.catfish.top/</link><description>Recent content on Catfish</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 28 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.catfish.top/index.xml" rel="self" type="application/rss+xml"/><item><title>MIT 6.824 分布式系统初探（一）</title><link>https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/</link><pubDate>Thu, 07 Sep 2017 01:21:00 +0800</pubDate><guid>https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/</guid><description>&lt;img src="https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/hadoop.png" alt="Featured image of post MIT 6.824 分布式系统初探（一）" />&lt;h2 id="概述">概述&lt;/h2>
&lt;p>Google工程师Jeffrey Dean 和 Sanjay Ghemawat在2004年发表了一篇论文&lt;a class="link" href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf" target="_blank" rel="noopener"
>MapReduce: Simplified Data Processing on Large Clusters&lt;/a>，MapReduce作为大规模数据处理的需求下孕育而生的产物，被创造的初衷是为了解决Google公司内部搜索引擎中大规模数据的并行化处理。&lt;/p>
&lt;p>引用&lt;a class="link" href="https://zh.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener"
>维基百科&lt;/a>中对MapReduce的介绍：&lt;/p>
&lt;blockquote>
&lt;p>MapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运算。&lt;/p>
&lt;/blockquote>
&lt;p>概念“&lt;strong>Map（映射）&lt;/strong>”和“&lt;strong>Reduce（归纳）&lt;/strong>”，及他们的主要思想，都是从函数式编程语言借来的，还有从矢量编程语言借来的特性。当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归纳）函数，用来保证所有映射的键值对中的每一个共享相同的键组。&lt;/p>
&lt;p>本系列将根据&lt;a class="link" href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener"
>MIT6.824&lt;/a>课程进行学习
MapReduce&lt;/p>
&lt;hr>
&lt;p>简单看来，MapReduce的架构正如其名，分为Map和Reduce两部分。&lt;/p>
&lt;p>&lt;figure style="flex-grow: 139; flex-basis: 334px">
&lt;a href="https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/mapreduce_1.png" data-size="631x453">&lt;img src="https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/mapreduce_1.png"
srcset="https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/mapreduce_1_hu5bd887eb443ed765e1e333d85ebea25c_47658_480x0_resize_box_2.png 480w, https://www.catfish.top/p/mit-6.824-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%8E%A2%E4%B8%80/mapreduce_1_hu5bd887eb443ed765e1e333d85ebea25c_47658_1024x0_resize_box_2.png 1024w"
width="631"
height="453"
loading="lazy"
alt="MapReduce Overview">
&lt;/a>
&lt;figcaption>MapReduce Overview&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>作为一个计算框架，其最大的核心便在于&lt;strong>计算&lt;/strong>二字，以往处理计算的模式为单机运行，在大数据的情况下只能使用具有更强算力的计算机来完成计算工作，而算力的提升是需要花费极大的成本，这样在成本上是极为不划算的。在这一背景下MapReduce孕育而生，有个这样一个框架，就可以将数台不同算力的计算机组成一个集群，和适度的调度下并行计算提高效率降低成本。&lt;/p>
&lt;p>根据上图，MapReduce中存在3中角色，Master，Worker（Map），Worker(Reduce）,Master负责Map，Reduce两层的调度管理,Worker(Map)负责进行Map操作，Worker（Reduce）负责进行Reduce操作&lt;/p>
&lt;p>现在以该课程&lt;a class="link" href="https://pdos.csail.mit.edu/6.824/labs/lab-1.html" target="_blank" rel="noopener"
>lab1&lt;/a>为例来进行细致的学习，整套课程将由&lt;a class="link" href="https://golang.org/" target="_blank" rel="noopener"
>Go&lt;/a>语言来实现。
lab1主要是对MapReduce模型进行初步的学习，实现一个本机的&lt;code>MapReduce&lt;/code>模型，完成对多个文件的词频统计。&lt;/p>
&lt;h3 id="示例程序流程">示例程序流程&lt;/h3>
&lt;p>入口由上层程序控制，这个地方从master调度开始，预先定义Reduce任务个数m，再根据文本文件输入数量n。&lt;/p>
&lt;p>master将n传递给doMap也就是Map调度层，告诉Map调度层执行n次Map计算，每个Map计算层对应输入各个文本文件的数据。&lt;/p>
&lt;p>Map调度层将输出m*n个文件作为Map和Reduce的中间数据传递媒介，举例假设现在m为2、n为3，输出文件&lt;code>mid-0-0&lt;/code> &lt;code>mid-0-1&lt;/code> &lt;code>mid-1-0&lt;/code> &lt;code>mid-1-1&lt;/code> &lt;code>mid-2-0&lt;/code> &lt;code>mid-2-1&lt;/code>这六个文件,其中&lt;code>mid-0-0&lt;/code> &lt;code>mid-0-1&lt;/code>为第一个文本Map操作后的到的切分开的两个中间数据文件，剩下的以此类推。&lt;/p>
&lt;p>在Reduce调度层中便会将这六个文件交由Reduce计算层处理，将件&lt;code>mid-0-0&lt;/code> &lt;code>mid-1-0&lt;/code> &lt;code>mid-2-0&lt;/code>交由编号为0的Reduce计算任务处理，显然，编号为1的任务则负责剩下3个文件的规约操作。Reduce调度层中仍然会将每个Reduce计算层任务得到的数据分别存入文件，根据Reduce任务的数量m为2，则文件编号分别为&lt;code>res-0&lt;/code> &lt;code>res-1&lt;/code>，这样Map、Reduce两种操作完成，但整个任务还为完成。&lt;/p>
&lt;p>Merge操作则是最后一个步骤通常由master来完成，通过merge操作将上述的&lt;code>res-0&lt;/code> &lt;code>res-1&lt;/code>合并，将所有结果存入到一个文件中，这样，整个MapReduce实现的多文本词频统计程序执行完毕。&lt;/p>
&lt;hr>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">KeyValue&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Key&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">Value&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="master调度">Master调度&lt;/h3>
&lt;p>&lt;strong>master.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Master&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jobName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">files&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nreduce&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">schedule&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">phase&lt;/span> &lt;span class="nx">jobPhase&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">finish&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jobName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">jobName&lt;/span>
&lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">files&lt;/span>
&lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">nReduce&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">nreduce&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: Starting Map/Reduce task %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jobName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">schedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mapPhase&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//map层进行操作
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">schedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reducePhase&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//reduce层进行操作
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">finish&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//结束所有worker
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">merge&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//合并
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s: Map/Reduce task completed\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">doneChannel&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这部分展示了master如何对map、reduce进行调度的过程，首先执行所有的map操作，执行完毕后执行所有的reduce操作进行规约，最后merge合并所有reduce之后的结果，把所有的结果汇总并存储。&lt;/p>
&lt;hr>
&lt;h3 id="map调度层">Map调度层&lt;/h3>
&lt;p>&lt;strong>common_map.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">doMap&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">jobName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// MapReduce任务名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mapTaskNumber&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Map任务序号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">inFile&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">nReduce&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Reduce Worker数量 (&amp;#34;R&amp;#34; in the paper)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mapF&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">contents&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">KeyValue&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">dat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//读文本文件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">mapF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dat&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">//根据文件中的内容进行单文件Map操作
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nReduce&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//对于每个文本文件，将使用KeyValue的slice来存放，之后会对这部分数据进行切分，根据nReduce（reduce层worker数量）来决定划分数目
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kv&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">index&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">ihash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="nx">nReduce&lt;/span> &lt;span class="c1">//序号划分，根据Key做hash处理，对结果模你Reduce得到划分序号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">kv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">kv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nReduce&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">reduceName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jobName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mapTaskNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">jsonObj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Marshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">//使用json作为中间数据
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">jsonObj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//将数据写入到文件中 //将json数据写入到文件中，供Reduce操作使用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Map调度层提供数据的输入与输出，不关心计算过程&lt;/p>
&lt;hr>
&lt;h3 id="map计算层">Map计算层&lt;/h3>
&lt;p>&lt;strong>wc.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//filename 为输入文件文件名
&lt;/span>&lt;span class="c1">//contents 为文本内容
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">mapF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">contents&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">mapreduce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KeyValue&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">mapreduce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KeyValue&lt;/span>
&lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">reg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\n|\r|\t|[ ]+|[\\-]+|\\(|\\)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">contents&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">reg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReplaceAllString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contents&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">reg&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[^(a-zA-Z )]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">contents&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">reg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReplaceAllString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contents&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//fmt.Println(contents)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contents&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">TrimSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ToLower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Itoa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">res&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mapreduce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">KeyValue&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Map计算层根据输入的文本内容完成下列步骤：&lt;/p>
&lt;ol>
&lt;li>使用正则表达式将&lt;code>\n&lt;/code> &lt;code>\t&lt;/code> &lt;code>\r&lt;/code>替换为空格&lt;/li>
&lt;li>使用正则表达式将无关字符删除&lt;/li>
&lt;li>使用&lt;code>strings.Split&lt;/code>方法根据空格进行划分&lt;/li>
&lt;li>取出划分后的每个词，使用&lt;code>strings.TrimSpace&lt;/code>方法去除两端空格，使用&lt;code>map[string] int&lt;/code>结构的m来完成统计&lt;/li>
&lt;li>将&lt;code>map[string] int&lt;/code>转换为&lt;code>[]KeyValue&lt;/code>返回&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&lt;strong>Map计算层和Map调度层共同组成的Map的结构，一个负责计算，一个负责IO，分工明确&lt;/strong>&lt;/em>&lt;/p>
&lt;hr>
&lt;h3 id="reduce调度层">Reduce调度层&lt;/h3>
&lt;p>&lt;strong>common_reduce.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">doReduce&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">jobName&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// MapReduce任务名
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reduceTaskNumber&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Reduce任务序号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">outFile&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 输出文件路径
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">nMap&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Map任务数 (&amp;#34;M&amp;#34; in the paper)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">reduceF&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">values&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">][]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">nMap&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">filename&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">reduceName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jobName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reduceTaskNumber&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">tm&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmarshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">tm&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">tm&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">dataM&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nx">KeyValue&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ans&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">reduceF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">dataM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dataM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">KeyValue&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">ans&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">jsonData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Marshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dataM&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">jsonData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Reduce调度层完成的工作是将Map执行后的文件读入为数据交有Reduce来规约，同样也不负责Reduce具体的过程，仅负责数据的读入（文件读入）和数据的保存（文件写出）&lt;/p>
&lt;hr>
&lt;h3 id="reduce计算层">Reduce计算层&lt;/h3>
&lt;p>&lt;strong>wc.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//key为文本中的单词
&lt;/span>&lt;span class="c1">//values为各个Map处理后得到的单词的个数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">reduceF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">values&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">sum&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">values&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">num&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//string转int
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">sum&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="c1">//累加
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Itoa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//将int转string返回
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Reduce计算层则仅仅负责数据的规约，步骤如下：&lt;/p>
&lt;ol>
&lt;li>遍历整个values切片&lt;/li>
&lt;li>将values的数值累加&lt;/li>
&lt;li>将累加总和作为结果返回&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="merge">Merge&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Master&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">merge&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">kvs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//总的数据存放
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">nReduce&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">mergeName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jobName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//merge文件名生成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span>&lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Merge: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">jsonObj&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">KeyValue&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmarshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">jsonObj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//json解码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Merge: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="o">:=&lt;/span>&lt;span class="k">range&lt;/span> &lt;span class="nx">jsonObj&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">kvs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Merge操作便将Reduce操作得到的数据进行合并，完成最后一步工作。&lt;/p>
&lt;hr>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>通过这几天短暂的学习，MapReduce模型确实能够极大的利用现有计算资源来打造一个算力强劲的计算机集群，但是本实例中也存在几个局限性：&lt;/p>
&lt;ol>
&lt;li>本实例仅在单机中运行&lt;/li>
&lt;li>操作间数据交换使用文件，在性能上可能会有一定影响&lt;/li>
&lt;li>任务划分的科学性也应该是性能上应该考虑的问题，集群中计算机算力各不相同的时候，能者多劳，任务的划分应更加合理，才可能避免水桶原理造成的性能上的损失&lt;/li>
&lt;/ol>
&lt;p>如有不足之处，恳请提出批评！&lt;/p></description></item><item><title>Blog 第一帖 - 字符坑 BOM</title><link>https://www.catfish.top/p/blog-%E7%AC%AC%E4%B8%80%E5%B8%96-%E5%AD%97%E7%AC%A6%E5%9D%91-bom/</link><pubDate>Wed, 18 May 2016 00:36:00 +0800</pubDate><guid>https://www.catfish.top/p/blog-%E7%AC%AC%E4%B8%80%E5%B8%96-%E5%AD%97%E7%AC%A6%E5%9D%91-bom/</guid><description>&lt;img src="https://www.catfish.top/p/blog-%E7%AC%AC%E4%B8%80%E5%B8%96-%E5%AD%97%E7%AC%A6%E5%9D%91-bom/bom.jpg" alt="Featured image of post Blog 第一帖 - 字符坑 BOM" />&lt;h2 id="字符编码">字符编码&lt;/h2>
&lt;p>字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。&lt;/p>
&lt;p>常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数。通常会额外使用一个扩充的比特，以便于以1个字节的方式存储。
常见的字符编码有： ASCII、UTF-8、Unicode、GBK等&lt;/p>
&lt;p>详见&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener"
>WikiPedia&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="ascii">ASCII&lt;/h2>
&lt;p>&lt;strong>ASCII&lt;/strong> ( &lt;strong>A&lt;/strong> merican &lt;strong>S&lt;/strong> tandard &lt;strong>C&lt;/strong> ode for &lt;strong>I&lt;/strong> nformation &lt;strong>I&lt;/strong> nterchange) 即美国信息交换标准代码。&lt;/p>
&lt;p>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示（一些终端提供了扩展，使得这些字符可显示为诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符。控制字符的用途主要是用来操控已经处理过的文字。在33个字符之外的是95个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。&lt;/p>
&lt;p>ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。&lt;/p>
&lt;p>详见&lt;a class="link" href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener"
>WikiPedia&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="unicode">Unicode&lt;/h2>
&lt;hr>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Unicode_logo.svg/108px-Unicode_logo.svg.png" alt="Unicode" />&lt;/p>
&lt;p>&lt;strong>Unicode&lt;/strong> 是为了解决传统的字符编码方案的局限而产生的，例如ISO 8859-1所定义的字符虽然在不同的国家中广泛地使用，可是在不同国家间却经常出现不兼容的情况。&lt;/p>
&lt;p>很多传统的编码方式都有一个共同的问题，即容许电脑处理双语环境（通常使用拉丁字母以及其本地语言），但却无法同时支持多语言环境（指可同时处理多种语言混合的情况）。&lt;/p>
&lt;p>目前，几乎所有电脑系统都支持基本拉丁字母，并各自支持不同的其他编码方式。Unicode为了和它们相互兼容，其首256字符保留给ISO 8859-1所定义的字符，使既有的西欧语系文字的转换不需特别考量；并且把大量相同的字符重复编到不同的字符码中去，使得旧有纷杂的编码方式得以和Unicode编码间互相直接转换，而不会丢失任何信息。举例来说，全角格式区块包含了主要的拉丁字母的全角格式，在中文、日文、以及韩文字形当中，这些字符以全角的方式来呈现，而不以常见的半角形式显示，这对竖排文字和等宽排列文字有重要作用。&lt;/p>
&lt;p>详见&lt;a class="link" href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener"
>WikiPedia&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="utf-8">UTF-8&lt;/h2>
&lt;hr>
&lt;p>&lt;strong>UTF-8&lt;/strong> （8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，也是一种前缀码。&lt;/p>
&lt;p>它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部分修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或发送文字的应用中，优先采用的编码。&lt;/p>
&lt;p>&lt;strong>UTF-8&lt;/strong> 现已经作为通用的字符编码，应用于各中网页编码，数据编码，数据库字符编码等。编码的统一能够写出的程序或网页在中文环境下大大减少乱码的出现。dddddddddddddddddd&lt;/p>
&lt;p>详见&lt;a class="link" href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener"
>WikiPedia&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="gbk">GBK&lt;/h2>
&lt;hr>
&lt;p>&lt;strong>汉字内码扩展规范&lt;/strong> ，称GBK，全名为《汉字内码扩展规范(GBK)》1.0版，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订，国家技术监督局标准化司和电子工业部科技与质量监督司1995年12月15日联合以《技术标函[1995]229号》文件的形式公布。&lt;/p>
&lt;p>GBK的K为汉语拼音Kuo Zhan（扩展）中“扩”字的声母。英文全称Chinese Internal Code Extension Specification。&lt;/p>
&lt;p>GBK 只为“技术规范指导性文件”，不属于国家标准。国家质量技术监督局于2000年3月17日推出了GB 18030-2000标准，以取代GBK。&lt;/p>
&lt;hr>
&lt;h2 id="bom--byte-order-mark--">BOM ( Byte Order Mark )&lt;/h2>
&lt;hr>
&lt;p>&lt;strong>这个才是重点，BOM头。&lt;/strong>&lt;/p>
&lt;p>在UTF-8编码文件中BOM在文件头部，占用三个字节，用来标示该文件属于UTF-8编码，现在已经有很多软件识别BOM头，但是还有些不能识别BOM头，比如Windows自带的记事本软件，这也是用记事本编辑UTF-8编码后执行就会出错的原因了。&lt;/p>
&lt;p>Windows下&lt;/p>
&lt;ul>
&lt;li>
&lt;p>支持BOM的编辑器
Notepad++&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不支持BOM的编辑器
Windows自带的记事本 （&lt;strong>坑&lt;/strong>）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>正因有BOM头的存在，使我在本地Jekyll的调试环境中，页面不能正常显示。&lt;/p>
&lt;p>&lt;strong>请使用Windows的童鞋一定注意该问题&lt;/strong>&lt;/p>
&lt;p>目前已经切换为 &lt;a class="link" href="https://github.com/gohugoio/hugo" target="_blank" rel="noopener"
>Hugo&lt;/a> + &lt;a class="link" href="https://github.com/features/actions" target="_blank" rel="noopener"
>GitHub Action&lt;/a> 的方式来完成静态网站的生成&lt;/p></description></item></channel></rss>